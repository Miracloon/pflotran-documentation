stages:
  - build-deploy-documentation
  - final-status

image: docker:latest

services:
  - docker:dind

variables:
  GIT_DEPTH: 10
  GIT_STRATEGY: fetch
  DOCKER_DRIVER: "overlay2"
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375
  # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"

before_script:
  - apk add --no-cache bash curl
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

build-deploy-documentation:
  stage: build-deploy-documentation
  script:
    - BUILD_STATUS=running BUILD_KEY=push ./.gitlab/build_status
    - docker --version
    - export IMAGE=$CI_REGISTRY_IMAGE:documentation
    - docker pull $IMAGE || true
    - >
      docker build
      -f ./.gitlab/dockerfile-gitlab
      --cache-from $IMAGE
      --tag $IMAGE
      .
    - docker push $IMAGE
    # copy log files from image by launching container, copying
    # and destorying the container
    - id=$(docker create $IMAGE)
    - docker cp $id:/tmp/gitlab.tar.gz .
    - docker cp $id:/app/_build/html .
    - docker rm -v $id
    - ./tools/deploy-from-gitlab.sh
  artifacts:
    when: always
    paths:
      - html
      - gitlab.tar.gz

success:
  stage: final-status
  before_script:
    - apk add --no-cache bash curl
  after_script:
    - ""
  script:
    - env
    - BUILD_STATUS=passed BUILD_KEY=push ./.gitlab/build_status
  when: on_success

failure:
  stage: final-status
  before_script:
    - apk add --no-cache bash curl
  after_script:
    - ""
  script:
    - BUILD_STATUS=failed BUILD_KEY=push ./.gitlab/build_status
  when: on_failure
